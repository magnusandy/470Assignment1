/**
  * Andrew Magnus
  * amm215
  * 1114088
  * Assignment 1 - Problem 1
  */


import scala.math._

object Assign1Prob1 {

  //2a
  /**
    * this function takes in a string vector, an int threshold and a prefix string, for every string in the vector
    * with a length greater than threshhold, the prefix is added onto the string, a new vector string is returned
    * */
  def myAppend(v: Vector[String], t:Int, str:String): Vector[String] = {
    v.map(((item:String) => (if(item.length > t){(str+item)}else{item})))
  }

  //2b
  /**
    * This function takes in a string and returns a function that, when given a vector and integer threshold,
    * appends the given string to every string in the vector of length greater than threshhold, the function returns a new vector*/
  def myAppendCurriedString(str:String): (Vector[String],Int)=> Vector[String] = {
    myAppend(_:Vector[String], _:Int, str)
  }
  //2c
  /**
    * This function takes a vector, and  returns a function that takes in an integer threshhold and string prefix
    * this function returns a new vector where every string of length greater then the threshhold has the prefix added on
    * */
  def myAppendCurriedVec(v:Vector[String]): (Int,String)=> Vector[String] = {
    myAppend(v, _:Int, _:String)

    //2.d) You have the ability to write general functions and with currying make them more specific and targeted like the instance above a pretty customizable function that  takes 3 parameter
    // you like in 2d you can make a function like prefixSir that always prefixes Sir to the values of a vector, if you need to do that over and over it makes sense and makes things easier to read to
    //defined targeted functions from more general ones

    //Curried functions give you the ability to easily reuse general functions to make more targeted or specific
    // functions for a more singular purpose, for example the above prefixSir has a very singular goal, whereas
    //the function its made from is pretty general and could be used for a variety of different append uses

  }

  //3

  //takes in a vector of strings, a prefix and a threshhold. returns an ordered list of all strings with length
  //above the threshold and prefixed with the prefix str
  def myAppendFilteredAndSorted1(v:Vector[String], str:String, t :Integer): Vector[String] = {
    v.filter(_.length > t).map(str ++ _).sorted
  }

  //takes in a vector of strings, a prefix and a threshhold. returns an ordered list of all strings with length
  //above the threshold and prefixed with the prefix str
  //uses myAppend to get it done
  def myAppendFilteredAndSorted2(v:Vector[String], str:String, t :Integer): Vector[String] = {
    myAppend(v, t, str).filter(_ contains str).sorted
  }

  //4b
  /**
    * taking in an offset, frequency and amplitude, this function returns a function that computes the waveform at time t
    * */
  def createWaveformFunc(offset: Double, freq:Double, amp:Double): ((Int)=>Double) = {
    t:Int => offset+(amp*sin(2*3.14159*freq*t))
  }


  //4d

  //Calculates the Root mean square of the given vector of doubles
  def RMSFromMean(waveform: Vector[Double]):Double ={
    val n = waveform.length
    val average = (waveform.reduce(_+_)/n)
    sqrt((waveform.map(_-average).map(pow(_,2)).reduce(_+_))/n)
  }



  def main(args: Array[String]): Unit = {
    val vec = Vector(-1.0, 1.0, 2.0, 3.0)
    val prob1 =vec.filter(_>=0).map(sqrt(_)).reduce(_+_)
    println("Problem 1")

    println("1.")
    println("vec = "+vec)
    println("vec.filter(_>=0).map(sqrt(_)).reduce(_+_)\n"+prob1)


    println("2.a)")
    println("myAppend(Vector(\"This\", \"is\", \"A\", \"String\"), 4, \"bla-\")")
    println(myAppend(Vector("This", "is", "A", "String"), 4, "bla-"))

    println("2.b)")
    var prefixSir = myAppendCurriedString("Sir. ")
    println("prefixSir = myAppendCurriedString(\"Sir. \")")
    println("prefixSir(Vector(\"Nate\", \"Alex\", \"Andrew\"), 5)")
    println(prefixSir(Vector("Nate", "Alex", "Andrew"), 5))

    println("2.c)")
    var appendNameList = myAppendCurriedVec(Vector("Nate", "Alex", "Andrew"))
    println("var appendNameList = myAppendCurriedVec(Vector(\"Nate\", \"Alex\", \"Andrew\"))")
    println("appendNameList(3,\"Mr. \")")
    println(appendNameList(3,"Mr. "))
    println("appendNameList(4,\"Great \")")
    println(appendNameList(4,"Great "))

    println("2.d)")
    println("Curried functions give you the ability to easily reuse general functions to make more targeted or specific functions for a more singular purpose, for example the above prefixSir has a very singular goal, whereas the function its made from is pretty general and could be used for a variety of different append uses")

    //3
    println("3)")
    println("Version 1")
    println("myAppendFilteredAndSorted1(Vector(\"Nate\", \"Alex\", \"Ricky\",\"Andrew\"), \"Sir \", 4)")
    println(myAppendFilteredAndSorted1(Vector("Nate", "Alex", "Ricky","Andrew"), "Sir ", 4))

    println("Version 2 - Uses myAppend")
    println("myAppendFilteredAndSorted2(Vector(\"Nate\", \"Alex\", \"Ricky\",\"Andrew\"), \"Sir \", 4)")
    println(myAppendFilteredAndSorted2(Vector("Nate", "Alex", "Ricky","Andrew"), "Sir ", 4))

    //4a
    val sampleTimes = (1 to 1000).toVector
    println("4a")
    println("sampleTimes = ")
    println(sampleTimes)
    //4b
    println("4b")
    val waveformFunc = createWaveformFunc(10.0, 0.1, 1.0)
    println("waveformFunction closure = createWaveformFunc(10.0, 0.1, 1.0)")
    println(waveformFunc)
    //4c
    println("4c")
    val Waveform = sampleTimes.map(waveformFunc(_))
    println("Waveform = ")
    println(Waveform)
    //4d is the definition of RMSFromMean above
    //4e
    println("4e")
    println("RMSFromMean(Waveform) = ")
    println(RMSFromMean(Waveform))

  }
}

/*
------------OUTPUT OF PROGRAM TESTING---------------

Problem 1
1.
vec = Vector(-1.0, 1.0, 2.0, 3.0)
vec.filter(_>=0).map(sqrt(_)).reduce(_+_)
4.146264369941973
2.a)
myAppend(Vector("This", "is", "A", "String"), 4, "bla-")
Vector(This, is, A, bla-String)
2.b)
prefixSir = myAppendCurriedString("Sir. ")
prefixSir(Vector("Nate", "Alex", "Andrew"), 5)
Vector(Nate, Alex, Sir. Andrew)
2.c)
var appendNameList = myAppendCurriedVec(Vector("Nate", "Alex", "Andrew"))
appendNameList(3,"Mr. ")
Vector(Mr. Nate, Mr. Alex, Mr. Andrew)
appendNameList(4,"Great ")
Vector(Nate, Alex, Great Andrew)
2.d)
Curried functions give you the ability to easily reuse general functions to make more targeted or specific functions for a more singular purpose, for example the above prefixSir has a very singular goal, whereas the function its made from is pretty general and could be used for a variety of different append uses
3)
Version 1
myAppendFilteredAndSorted1(Vector("Nate", "Alex", "Ricky","Andrew"), "Sir ", 4)
Vector(Sir Andrew, Sir Ricky)
Version 2 - Uses myAppend
myAppendFilteredAndSorted2(Vector("Nate", "Alex", "Ricky","Andrew"), "Sir ", 4)
Vector(Sir Andrew, Sir Ricky)
4a
sampleTimes =
Vector
4b
waveformFunction closure = createWaveformFunc(10.0, 0.1, 1.0)
Assign1Prob1$$$Lambda$20/249515771@1554909b
4c
Waveform =
Vector(10.587784822932543, 10.951056188292881, 10.951057008296553, 10.587786969730539, 10.000002653589792, 9.412217323869594, 9.048944631717488, 9.048942171706472, 9.412210883475602, 9.999994692820414, 10.587780529324132, 10.951054548265445, 10.951058648283809, 10.587791263314116, 10.000007960769379, 9.412221617486281, 9.048946271758318, 9.04894053173261, 9.412206589900304, 9.999989385640829, 10.587776235699167, 10.951052908211222, 10.951060288244275, 10.587795556881138, 10.000013267948965, 9.412225911119526, 9.048947911825934, 9.048938891785538, 9.41220229634156, 9.999984078461242, 10.587771942057644, 10.951051268130211, 10.951061928177953, 10.587799850431603, 10.00001857512855, 9.412230204769324, 9.04894955192034, 9.048937251865253, 9.412198002799373, 9.999978771281658, 10.587767648399568, 10.951049628022414, 10.951063568084844, 10.587804143965512, 10.000023882308133, 9.412234498435678, 9.04895119204153, 9.048935611971755, 9.41219370927374, 9.999973464102071, 10.587763354724935, 10.951047987887828, 10.951065207964948, 10.587808437482867, 10.00002918948772, 9.41223879211859, 9.04895283218951, 9.048933972105047, 9.412189415764665, 9.999968156922488, 10.587759061033747, 10.951046347726455, 10.951066847818263, 10.587812730983662, 10.000034496667302, 9.412243085818053, 9.048954472364276, 9.048932332265125, 9.412185122272147, 9.999962849742907, 10.587754767326008, 10.951044707538294, 10.95106848764479, 10.587817024467903, 10.000039803846883, 9.412247379534072, 9.048956112565829, 9.048930692451993, 9.412180828796187, 9.999957542563326, 10.58775047360171, 10.951043067323347, 10.95107012744453, 10.587821317935585, 10.000045111026465, 9.412251673266645, 9.048957752794172, 9.048929052665647, 9.412176535336782, 9.999952235383747, 10.587746179860861, 10.951041427081613, 10.95107176721748, 10.587825611386712, 10.000050418206042, 9.412255967015778, 9.048959393049302, 9.048927412906087, 9.412172241893929, 9.999946928204162, 10.58774188610345, 10.951039786813089, 10.951073406963644, 10.587829904821287, 10.00005572538562, 9.41226026078146, 9.048961033331214, 9.048925773173318, 9.412167948467642, 9.999941621024584, 10.587737592329496, 10.951038146517782, 10.951075046683018, 10.5878341982393, 10.000061032565196, 9.412264554563697, 9.048962673639917, 9.048924133467338, 9.412163655057908, 9.99993631384501, 10.587733298538982, 10.951036506195685, 10.951076686375606, 10.587838491640756, 10.00006633974477, 9.412268848362489, 9.048964313975405, 9.048922493788144, 9.41215936166472, 9.999931006665436, 10.587729004731903, 10.951034865846802, 10.951078326041408, 10.587842785025654, 10.000071646924356, 9.412273142177833, 9.048965954337685, 9.048920854135739, 9.4121550682881, 9.999925699485866, 10.587724710908281, 10.951033225471132, 10.95107996568042, 10.587847078393995, 10.000076954103926, 9.412277436009733, 9.048967594726749, 9.048919214510123, 9.412150774928037, 9.999920392306295, 10.587720417068105, 10.951031585068677, 10.951081605292641, 10.587851371745778, 10.000082261283495, 9.412281729858185, 9.0489692351426, 9.048917574911295, 9.412146481584532, 9.999915085126728, 10.587716123211374, 10.951029944639432, 10.951083244878076, 10.587855665081005, 10.00008756846306, 9.412286023723192, 9.048970875585237, 9.048915935339256, 9.412142188257585, 9.999909777947165, 10.58771182933809, 10.951028304183401, 10.951084884436721, 10.587859958399674, 10.000092875642624, 9.412290317604752, 9.048972516054661, 9.048914295794004, 9.412137894947195, 9.999904470767602, 10.587707535448255, 10.951026663700585, 10.951086523968579, 10.587864251701784, 10.000098182822185, 9.412294611502867, 9.048974156550871, 9.04891265627554, 9.412133601653363, 9.999899163588044, 10.587703241541863, 10.951025023190976, 10.951088163473647, 10.58786854498735, 10.000103490001743, 9.412298905417545, 9.048975797073869, 9.048911016783862, 9.41212930837609, 9.999893856408471, 10.58769894761892, 10.951023382654585, 10.951089802951927, 10.587872838256343, 10.000108797181298, 9.412303199348754, 9.048977437623657, 9.048909377318976, 9.412125015115373, 9.999888549228933, 10.58769465367941, 10.951021742091408, 10.951091442403419, 10.587877131508769, 10.000114104360865, 9.41230749329654, 9.048979078200224, 9.048907737880883, 9.412120721871204, 9.999883242049368, 10.587690359723371, 10.951020101501449, 10.951093081828127, 10.58788142474466, 10.000119411540398, 9.412311787260855, 9.048980718803586, 9.048906098469569, 9.412116428643616, 9.999877934869835, 10.587686065750757, 10.951018460884693, 10.951094721226037, 10.58788571796397, 10.000124718719958, 9.412316081241746, 9.048982359433726, 9.048904459085053, 9.412112135432563, 9.999872627690278, 10.587681771761613, 10.95101682024116, 10.951096360597168, 10.587890011166742, 10.000130025899486, 9.412320375239167, 9.04898400009066, 9.048902819727317, 9.412107842238093, 9.999867320510752, 10.587677477755893, 10.951015179570833, 10.9510979999415, 10.587894304352933, 10.000135333079038, 9.412324669253163, 9.048985640774372, 9.04890118039637, 9.412103549060157, 9.999862013331201, 10.587673183733642, 10.951013538873717, 10.951099639259052, 10.587898597522589, 10.000140640258559, 9.412328963283713, 9.04898728148488, 9.04889954109222, 9.412099255898804, 9.999856706151654, 10.587668889694816, 10.951011898149826, 10.951101278549809, 10.587902890675686, 10.000145947438103, 9.412333257330792, 9.048988922222165, 9.04889790181485, 9.412094962753986, 9.99985139897214, 10.587664595639461, 10.951010257399139, 10.951102917813783, 10.587907183812202, 10.000151254617615, 9.412337551394446, 9.048990562986246, 9.048896262564279, 9.41209066962575, 9.999846091792602, 10.587660301567531, 10.951008616621673, 10.95110455705096, 10.587911476932181, 10.000156561797152, 9.412341845474629, 9.048992203777104, 9.048894623340487, 9.41208637651405, 9.999840784613097, 10.587656007479072, 10.951006975817414, 10.951106196261357, 10.587915770035577, 10.000161868976654, 9.412346139571387, 9.048993844594756, 9.048892984143494, 9.412082083418934, 9.999835477433567, 10.587651713374038, 10.951005334986377, 10.951107835444956, 10.58792006312244, 10.000167176156182, 9.412350433684674, 9.048995485439187, 9.048891344973281, 9.412077790340353, 9.99983017025407, 10.587647419252452, 10.951003694128545, 10.951109474601775, 10.587924356192717, 10.000172483335705, 9.412354727814536, 9.048997126310413, 9.048889705829865, 9.412073497278332, 9.999824863074549, 10.587643125114338, 10.951002053243934, 10.951111113731805, 10.587928649246457, 10.000177790515194, 9.412359021960926, 9.048998767208424, 9.048888066713229, 9.412069204232893, 9.999819555895064, 10.587638830959648, 10.95100041233253, 10.951112752835039, 10.587932942283617, 10.000183097694707, 9.412363316123892, 9.049000408133212, 9.048886427623392, 9.412064911203991, 9.999814248715554, 10.58763453678843, 10.950998771394348, 10.95111439191149, 10.587937235304238, 10.000188404874185, 9.412367610303386, 9.049002049084796, 9.048884788560335, 9.41206061819167, 9.999808941536076, 10.587630242600637, 10.950997130429371, 10.951116030961144, 10.587941528308278, 10.000193712053688, 9.412371904499453, 9.049003690063156, 9.048883149524075, 9.41205632519589, 9.999803634356576, 10.587625948396317, 10.950995489437618, 10.951117669984017, 10.58794582129578, 10.000199019233158, 9.41237619871205, 9.049005331068312, 9.048881510514597, 9.41205203221669, 9.99979832717711, 10.587621654175422, 10.95099384841907, 10.951119308980092, 10.587950114266722, 10.000204326412648, 9.412380492941221, 9.049006972100244, 9.048879871531907, 9.412047739254028, 9.999793019997623, 10.587617359938, 10.950992207373737, 10.951120947949386, 10.58795440722108, 10.000209633592105, 9.41238478718694, 9.049008613158971, 9.048878232576017, 9.41204344630795, 9.99978771281814, 10.587613065684003, 10.950990566301625, 10.951122586891882, 10.587958700158902, 10.000214940771585, 9.412389081449192, 9.049010254244475, 9.048876593646906, 9.412039153378432, 9.999782405638692, 10.587608771413455, 10.950988925202727, 10.951124225807598, 10.587962993080163, 10.00022024795103, 9.412393375728014, 9.049011895356765, 9.048874954744594, 9.412034860465429, 9.99977709845925, 10.58760447712638, 10.950987284077028, 10.951125864696516, 10.58796728598484, 10.000225555130468, 9.412397670023365, 9.049013536495858, 9.048873315869072, 9.412030567569033, 9.999771791279757, 10.587600182822754, 10.950985642924561, 10.951127503558643, 10.587971578872956, 10.000230862309959, 9.412401964335265, 9.049015177661719, 9.04887167702032, 9.412026274689197, 9.999766484100329, 10.587595888502577, 10.950984001745306, 10.951129142393999, 10.587975871744511, 10.000236169489384, 9.412406258663763, 9.049016818854366, 9.048870038198379, 9.412021981825875, 9.999761176920906, 10.587591594165804, 10.950982360539268, 10.951130781202547, 10.587980164599552, 10.000241476668803, 9.412410553008765, 9.049018460073816, 9.048868399403224, 9.412017688979162, 9.99975586974149, 10.587587299812528, 10.950980719306424, 10.951132419984306, 10.587984457437985, 10.000246783848272, 9.412414847370316, 9.049020101320032, 9.04886676063486, 9.412013396149009, 9.999750562562024, 10.587583005442701, 10.950979078046814, 10.951134058739292, 10.587988750259857, 10.000252091027678, 9.412419141748419, 9.049021742593036, 9.048865121893268, 9.412009103335418, 9.99974525538262, 10.587578711056278, 10.950977436760418, 10.951135697467473, 10.587993043065167, 10.000257398207077, 9.412423436143117, 9.049023383892823, 9.048863483178485, 9.412004810538342, 9.999739948203226, 10.587574416653352, 10.950975795447237, 10.95113733616886, 10.587997335853961, 10.000262705386469, 9.412427730554318, 9.049025025219416, 9.04886184449049, 9.412000517757875, 9.999734641023839, 10.587570122233876, 10.950974154107254, 10.951138974843461, 10.588001628626149, 10.00026801256591, 9.412432024982069, 9.049026666572775, 9.048860205829286, 9.411996224993967, 9.999729333844401, 10.58756582779785, 10.9509725127405, 10.951140613491289, 10.588005921381775, 10.000273319745284, 9.412436319426416, 9.049028307952918, 9.048858567194854, 9.411991932246623, 9.99972402666503, 10.587561533345227, 10.950970871346964, 10.951142252112309, 10.588010214120885, 10.000278626924654, 9.412440613887266, 9.049029949359849, 9.04885692858723, 9.411987639515795, 9.999718719485665, 10.587557238876103, 10.950969229926624, 10.951143890706538, 10.588014506843386, 10.000283934104015, 9.412444908364666, 9.04903159079358, 9.048855290006394, 9.411983346801573, 9.999713412306251, 10.58755294439043, 10.950967588479518, 10.951145529273978, 10.588018799549326, 10.000289241283424, 9.412449202858614, 9.04903323225408, 9.048853651452331, 9.411979054103915, 9.999708105126903, 10.587548649888205, 10.950965947005624, 10.951147167814645, 10.588023092238704, 10.000294548462769, 9.412453497369158, 9.049034873741366, 9.048852012925078, 9.411974761422819, 9.999702797947561, 10.587544355369387, 10.950964305504947, 10.951148806328504, 10.588027384911564, 10.000299855642105, 9.412457791896205, 9.049036515255436, 9.048850374424614, 9.411970468758238, 9.99969749076823, 10.587540060834066, 10.950962663977467, 10.951150444815573, 10.588031677567818, 10.000305162821434, 9.412462086439799, 9.049038156796309, 9.048848735950939, 9.411966176110267, 9.999692183588849, 10.587535766282196, 10.95096102242322, 10.951152083275868, 10.588035970207507, 10.000310470000809, 9.412466380999945, 9.049039798363948, 9.048847097504039, 9.411961883478858, 9.999686876409534, 10.587531471713731, 10.950959380842187, 10.951153721709357, 10.588040262830635, 10.00031577718012, 9.412470675576683, 9.049041439958373, 9.048845459083944, 9.411957590863967, 9.999681569230228, 10.587527177128765, 10.95095773923437, 10.951155360116056, 10.588044555437245, 10.000321084359422, 9.412474970169924, 9.049043081579601, 9.048843820690642, 9.411953298265683, 9.999676262050931, 10.58752288252725, 10.95095609759975, 10.951156998495964, 10.588048848027247, 10.00032639153877, 9.412479264779712, 9.049044723227595, 9.04884218232413, 9.411949005683963, 9.999670954871586, 10.587518587909187, 10.950954455938364, 10.951158636849097, 10.588053140600685, 10.000331698718053, 9.41248355940605, 9.049046364902374, 9.04884054398439, 9.411944713118807, 9.999665647692307, 10.587514293274529, 10.950952814250192, 10.951160275175425, 10.58805743315756, 10.000337005897329, 9.412487854048983, 9.049048006603938, 9.048838905671458, 9.411940420570167, 9.999660340513039, 10.58750999862337, 10.950951172535218, 10.951161913474962, 10.58806172569792, 10.000342313076592, 9.412492148708417, 9.049049648332304, 9.048837267385316, 9.411936128038137, 9.999655033333722, 10.587505703955662, 10.950949530793478, 10.951163551747708, 10.588066018221667, 10.000347620255905, 9.412496443384397, 9.049051290087437, 9.048835629125948, 9.41193183552267, 9.999649726154471, 10.587501409271406, 10.950947889024953, 10.95116518999368, 10.588070310728853, 10.00035292743515, 9.412500738076973, 9.049052931869355, 9.048833990893389, 9.411927543023767, 9.999644418975231, 10.587497114570557, 10.950946247229641, 10.951166828212845, 10.58807460321952, 10.000358234614385, 9.412505032786049, 9.049054573678058, 9.04883235268762, 9.411923250541381, 9.999639111796002, 10.587492819853207, 10.95094460540753, 10.951168466405218, 10.588078895693577, 10.00036354179361, 9.412509327511675, 9.049056215513561, 9.048830714508641, 9.411918958075606, 9.999633804616725, 10.587488525119308, 10.950942963558651, 10.951170104570801, 10.58808318815107, 10.000368848972881, 9.412513622253845, 9.049057857375832, 9.048829076356435, 9.411914665626394, 9.999628497437515, 10.587484230368863, 10.950941321682988, 10.951171742709612, 10.588087480592, 10.000374156152086, 9.412517917012611, 9.049059499264889, 9.04882743823104, 9.4119103731937, 9.999623190258315, 10.587479935601825, 10.95093967978054, 10.951173380821613, 10.58809177301641, 10.00037946333128, 9.412522211787877, 9.049061141180745, 9.048825800132434, 9.411906080777618, 9.999617883079127, 10.587475640818285, 10.95093803785129, 10.951175018906824, 10.588096065424212, 10.00038477051052, 9.41252650657969, 9.04906278312337, 9.048824162060619, 9.411901788378099, 9.999612575899892, 10.5874713460182, 10.950936395895274, 10.95117665696526, 10.58810035781545, 10.000390077689692, 9.41253080138805, 9.049064425092778, 9.048822524015577, 9.411897495995145, 9.999607268720725, 10.58746705120152, 10.950934753912474, 10.951178294996888, 10.588104650190122, 10.000395384868854, 9.412535096213002, 9.04906606708897, 9.048820885997344, 9.41189320362871, 9.99960196154157, 10.58746275636834, 10.950933111902888, 10.951179933001725, 10.588108942548274, 10.000400692048004, 9.412539391054455, 9.049067709111966, 9.048819248005902, 9.411888911278883, 9.999596654362424, 10.587458461518613, 10.950931469866502, 10.951181570979772, 10.588113234889818, 10.0004059992272, 9.412543685912455, 9.049069351161727, 9.048817610041233, 9.411884618945624, 9.999591347183234, 10.587454166652341, 10.95092982780335, 10.951183208931045, 10.588117527214795, 10.000411306406328, 9.412547980787046, 9.04907099323827, 9.048815972103373, 9.411880326628928, 9.999586040004113, 10.587449871769476, 10.950928185713412, 10.95118484685551, 10.588121819523254, 10.000416613585443, 9.41255227567814, 9.0490726353416, 9.048814334192306, 9.411876034328753, 9.999580732825002, 10.58744557687011, 10.950926543596673, 10.951186484753181, 10.588126111815102, 10.000421920764548, 9.412556570585778, 9.049074277471732, 9.048812696308028, 9.411871742045186, 9.999575425645848, 10.587441281954199, 10.950924901453169, 10.951188122624064, 10.588130404090384, 10.000427227943698, 9.412560865509962, 9.049075919628628, 9.048811058450525, 9.411867449778187, 9.99957011846676, 10.587436987021741, 10.95092325928288, 10.951189760468171, 10.588134696349101, 10.000432535122721, 9.412565160450738, 9.04907756181231, 9.048809420619847, 9.411863157527707, 9.999564811287687, 10.587432692072738, 10.95092161708579, 10.95119139828547, 10.588138988591252, 10.000437842301903, 9.412569455408015, 9.049079204022773, 9.04880778281591, 9.411858865293837, 9.999559504108625, 10.587428397107189, 10.950919974861932, 10.951193036075978, 10.588143280816839, 10.000443149480958, 9.412573750381837, 9.049080846260022, 9.048806145038798, 9.411854573076536, 9.999554196929575, 10.587424102125002, 10.950918332611293, 10.951194673839694, 10.588147573025951, 10.000448456660003, 9.412578045372204, 9.049082488524089, 9.048804507288477, 9.411850280875797, 9.999548889750539, 10.587419807126363, 10.95091669033387, 10.951196311576618, 10.588151865218405, 10.000453763839033, 9.412582340379117, 9.049084130814904, 9.048802869564948, 9.411845988691626, 9.9995435825714, 10.587415512111177, 10.95091504802966, 10.951197949286787, 10.588156157394293, 10.000459071018051, 9.412586635402574, 9.049085773132504, 9.048801231868211, 9.41184169652402, 9.99953827539239, 10.587411217079445, 10.95091340569867, 10.951199586970128, 10.588160449553616, 10.000464378197055, 9.41259093044267, 9.049087415476887, 9.048799594198265, 9.41183740437289, 9.99953296821339, 10.58740692203117, 10.950911763340894, 10.95120122462668, 10.588164741696373, 10.000469685376048, 9.412595225499219, 9.049089057848054, 9.048797956555111, 9.411833112238416, 9.999527661034405, 10.587402626966348, 10.950910120956301, 10.951202862256437, 10.588169033822561, 10.000474992555139, 9.412599520572313, 9.049090700246005, 9.048796318938713, 9.41182882012051, 9.999522353855433, 10.587398331884984, 10.95090847854496, 10.951204499859402, 10.588173325932186, 10.000480299734106, 9.41260381566195, 9.049092342670738, 9.048794681349143, 9.41182452801917, 9.999517046676473, 10.58739403678698, 10.950906836106835, 10.951206137435578, 10.588177618025334, 10.000485606913056, 9.412608110768133, 9.049093985122255, 9.048793043786365, 9.411820235934396, 9.99951173949753, 10.587389741672526, 10.950905193641926, 10.95120777498496, 10.588181910101824, 10.000490914091994, 9.41261240589086, 9.04909562760059, 9.048791406250377, 9.41181594386619, 9.999506432318483, 10.587385446541527, 10.950903551150233, 10.951209412507552, 10.588186202161747, 10.00049622127092, 9.412616701030132, 9.049097270105673, 9.048789768741182, 9.411811651814551, 9.999501125139567, 10.587381151393982, 10.950901908631758, 10.951211050003385, 10.588190494205103, 10.00050152844983, 9.41262099618604, 9.04909891263754, 9.04878813125878, 9.411807359779477, 9.999495817960664, 10.587376856229893, 10.9509002660865, 10.951212687472392, 10.588194786231892, 10.000506835628725, 9.4126252913584, 9.04910055519619, 9.048786493803169, 9.41180306776088, 9.999490510781774, 10.58737256104926, 10.950898623514423, 10.951214324914607, 10.588199078242114, 10.000512142807722, 9.412629586547304, 9.049102197781624, 9.048784856374349, 9.411798775758943, 9.9994852036029, 10.587368265852085, 10.950896980915598, 10.95121596233003, 10.58820337023577, 10.000517449986589, 9.412633881752754, 9.04910384039384, 9.048783218972288, 9.411794483773571, 9.99947989642404, 10.587363970638272, 10.95089533828999, 10.951217599718662, 10.588207662212856, 10.000522757165442, 9.412638176974745, 9.04910548303284, 9.048781581597051, 9.411790191804768, 9.999474589245194, 10.587359675408008, 10.9508936956376, 10.951219237080501, 10.588211954173468, 10.00052806434428, 9.412642472213282, 9.049107125698658, 9.04877994424861, 9.411785899852532, 9.999469282066363)
4e
RMSFromMean(Waveform) =
0.7071070395466311

 */
